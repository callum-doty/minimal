-- Compiled migrations
-- Generated by compile_migrations.py
-- Updated with missing tables and elements

-- Enable pgvector extension
CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;

-- Note: Tables are created in dependency order
-- Core tables first, followed by dependent tables

-- Create table batch_jobs (moved up to resolve dependency)
CREATE TABLE IF NOT EXISTS batch_jobs (
    id SERIAL NOT NULL,
    job_name TEXT NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    file_size BIGINT NOT NULL,
    status TEXT NOT NULL,
    total_documents INTEGER NOT NULL,
    processed_documents INTEGER,
    PRIMARY KEY (id)
);

-- Create core documents table (missing in original migrations)
CREATE TABLE IF NOT EXISTS documents (
    id SERIAL NOT NULL,
    filename TEXT NOT NULL,
    upload_date TIMESTAMP WITH TIME ZONE NOT NULL,
    file_size BIGINT NOT NULL,
    page_count INTEGER NOT NULL,
    status TEXT NOT NULL,
    batch_jobs_id INTEGER,
    processing_time DOUBLE PRECISION,
    search_vector TSVECTOR,
    embeddings vector(1536),
    PRIMARY KEY (id),
    FOREIGN KEY (batch_jobs_id) REFERENCES batch_jobs (id)
);

-- Create indexes for documents
CREATE INDEX IF NOT EXISTS ix_documents_filename ON documents (filename);
CREATE INDEX IF NOT EXISTS ix_documents_upload_date ON documents (upload_date);
CREATE INDEX IF NOT EXISTS ix_documents_status ON documents (status);
CREATE INDEX IF NOT EXISTS ix_documents_search_vector ON documents USING gin (search_vector);
CREATE INDEX IF NOT EXISTS documents_embeddings_idx ON documents USING ivfflat (embeddings vector_cosine_ops) WITH (lists='100');

-- Create classifications table (missing in original migrations)
CREATE TABLE IF NOT EXISTS classifications (
    id SERIAL NOT NULL,
    document_id INTEGER,
    category TEXT,
    confidence BIGINT,
    classification_date TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for classifications
CREATE INDEX IF NOT EXISTS ix_classifications_document_id ON classifications (document_id);
CREATE INDEX IF NOT EXISTS ix_classifications_category ON classifications (category);

-- Create communication_focus table (missing in original migrations)
CREATE TABLE IF NOT EXISTS communication_focus (
    id SERIAL NOT NULL,
    document_id INTEGER,
    primary_issue TEXT,
    secondary_issues TEXT,
    messaging_strategy TEXT,
    created_date TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for communication_focus
CREATE INDEX IF NOT EXISTS ix_communication_focus_document_id ON communication_focus (document_id);
CREATE INDEX IF NOT EXISTS ix_communication_focus_primary_issue ON communication_focus (primary_issue);

-- Create design_elements table (missing in original migrations)
CREATE TABLE IF NOT EXISTS design_elements (
    id SERIAL NOT NULL,
    document_id INTEGER,
    color_scheme TEXT,
    theme TEXT,
    mail_piece_type TEXT,
    geographic_location TEXT,
    target_audience TEXT,
    campaign_name TEXT,
    confidence BIGINT,
    created_date TIMESTAMP WITH TIME ZONE,
    visual_elements TEXT,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for design_elements
CREATE INDEX IF NOT EXISTS ix_design_elements_document_id ON design_elements (document_id);
CREATE INDEX IF NOT EXISTS ix_design_elements_geographic_location ON design_elements (geographic_location);

-- Create entities table (missing in original migrations)
CREATE TABLE IF NOT EXISTS entities (
    id SERIAL NOT NULL,
    document_id INTEGER,
    client_name TEXT,
    opponent_name TEXT,
    creation_date TEXT,
    survey_question TEXT,
    file_identifier TEXT,
    created_date TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for entities
CREATE INDEX IF NOT EXISTS ix_entities_document_id ON entities (document_id);
CREATE INDEX IF NOT EXISTS ix_entities_client_name ON entities (client_name);
CREATE INDEX IF NOT EXISTS ix_entities_opponent_name ON entities (opponent_name);

-- Create extracted_text table (missing in original migrations)
CREATE TABLE IF NOT EXISTS extracted_text (
    id SERIAL NOT NULL,
    document_id INTEGER,
    page_number INTEGER,
    text_content TEXT,
    confidence BIGINT,
    extraction_date TIMESTAMP WITH TIME ZONE,
    main_message TEXT,
    supporting_text TEXT,
    call_to_action TEXT,
    candidate_name TEXT,
    opponent_name TEXT,
    search_vector TSVECTOR,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for extracted_text
CREATE INDEX IF NOT EXISTS ix_extracted_text_document_id ON extracted_text (document_id);
CREATE INDEX IF NOT EXISTS ix_extracted_text_main_message ON extracted_text (main_message);
CREATE INDEX IF NOT EXISTS ix_extracted_text_supporting_text ON extracted_text (supporting_text);
CREATE INDEX IF NOT EXISTS ix_extracted_text_search_vector ON extracted_text USING gin (search_vector);

-- Create table keyword_taxonomy
CREATE TABLE IF NOT EXISTS keyword_taxonomy (
    id SERIAL NOT NULL,
    term TEXT NOT NULL,
    primary_category TEXT NOT NULL,
    subcategory TEXT,
    specific_term TEXT,
    description TEXT,
    created_date TIMESTAMP WITH TIME ZONE,
    parent_id INTEGER,
    PRIMARY KEY (id),
    FOREIGN KEY (parent_id) REFERENCES keyword_taxonomy (id)
);

-- Create indexes for keyword_taxonomy
CREATE INDEX IF NOT EXISTS ix_keyword_taxonomy_term ON keyword_taxonomy (term);
CREATE INDEX IF NOT EXISTS ix_keyword_taxonomy_primary_category ON keyword_taxonomy (primary_category);
CREATE INDEX IF NOT EXISTS ix_keyword_taxonomy_subcategory ON keyword_taxonomy (subcategory);

-- Create keyword_synonyms table (missing in original migrations)
CREATE TABLE IF NOT EXISTS keyword_synonyms (
    id SERIAL NOT NULL,
    taxonomy_id INTEGER,
    synonym TEXT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (taxonomy_id) REFERENCES keyword_taxonomy (id)
);

-- Create indexes for keyword_synonyms
CREATE INDEX IF NOT EXISTS ix_keyword_synonyms_taxonomy_id ON keyword_synonyms (taxonomy_id);
CREATE INDEX IF NOT EXISTS ix_keyword_synonyms_synonym ON keyword_synonyms (synonym);

-- Create table llm_analysis
CREATE TABLE IF NOT EXISTS llm_analysis (
    id SERIAL NOT NULL,
    document_id INTEGER,
    summary_description TEXT,
    visual_analysis TEXT,
    content_analysis TEXT,
    campaign_type TEXT,
    election_year TEXT,
    document_tone TEXT,
    confidence_score FLOAT,
    analysis_date TIMESTAMP WITH TIME ZONE,
    model_version TEXT,
    search_vector TSVECTOR,
    embeddings vector(1536),
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create indexes for llm_analysis
CREATE INDEX IF NOT EXISTS ix_llm_analysis_campaign_type ON llm_analysis (campaign_type);
CREATE INDEX IF NOT EXISTS ix_llm_analysis_document_id ON llm_analysis (document_id);
CREATE INDEX IF NOT EXISTS ix_llm_analysis_document_tone ON llm_analysis (document_tone);
CREATE INDEX IF NOT EXISTS ix_llm_analysis_election_year ON llm_analysis (election_year);
CREATE INDEX IF NOT EXISTS ix_llm_analysis_summary ON llm_analysis (summary_description);
CREATE INDEX IF NOT EXISTS ix_llm_analysis_search_vector ON llm_analysis USING gin (search_vector);
CREATE INDEX IF NOT EXISTS llm_analysis_embeddings_idx ON llm_analysis USING ivfflat (embeddings vector_cosine_ops) WITH (lists='100');

-- Create table llm_keywords
CREATE TABLE IF NOT EXISTS llm_keywords (
    id SERIAL NOT NULL,
    llm_analysis_id INTEGER,
    keyword TEXT,
    category TEXT,
    relevance_score BIGINT,
    taxonomy_id INTEGER,
    PRIMARY KEY (id),
    FOREIGN KEY (llm_analysis_id) REFERENCES llm_analysis (id),
    FOREIGN KEY (taxonomy_id) REFERENCES keyword_taxonomy (id)
);

-- Create indexes for llm_keywords
CREATE INDEX IF NOT EXISTS ix_llm_keywords_analysis_id ON llm_keywords (llm_analysis_id);
CREATE INDEX IF NOT EXISTS ix_llm_keywords_keyword ON llm_keywords (keyword);

-- Create table clients
CREATE TABLE IF NOT EXISTS clients (
    id SERIAL NOT NULL,
    client_name TEXT,
    campaign_name TEXT,
    created_date TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    document_id INTEGER,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create table dropbox_syncs
CREATE TABLE IF NOT EXISTS dropbox_syncs (
    id SERIAL NOT NULL,
    document_id INTEGER,
    dropbox_file_id VARCHAR(255),
    dropbox_path VARCHAR(512),
    sync_date TIMESTAMP WITH TIME ZONE,
    status VARCHAR(50),
    PRIMARY KEY (id),
    UNIQUE (dropbox_file_id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create table search_feedback
CREATE TABLE IF NOT EXISTS search_feedback (
    id SERIAL NOT NULL,
    search_query TEXT NOT NULL,
    document_id INTEGER,
    feedback_type VARCHAR(50),
    feedback_date TIMESTAMP WITH TIME ZONE,
    user_comment TEXT,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create table document_scorecards
CREATE TABLE IF NOT EXISTS document_scorecards (
    id SERIAL NOT NULL,
    document_id INTEGER NOT NULL,
    metadata_score INTEGER,
    text_extraction_score INTEGER,
    classification_score INTEGER,
    entity_score INTEGER,
    design_score INTEGER,
    keyword_score INTEGER,
    communication_score INTEGER,
    total_score INTEGER,
    requires_review BOOLEAN,
    review_reason TEXT,
    batch1_success BOOLEAN,
    batch2_success BOOLEAN,
    batch3_success BOOLEAN,
    metadata_flags TEXT,
    text_flags TEXT,
    classification_flags TEXT,
    entity_flags TEXT,
    design_flags TEXT,
    keyword_flags TEXT,
    communication_flags TEXT,
    reviewed BOOLEAN,
    review_date TIMESTAMP WITH TIME ZONE,
    reviewer_notes TEXT,
    corrections_made TEXT,
    created_date TIMESTAMP WITH TIME ZONE,
    updated_date TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (id),
    FOREIGN KEY (document_id) REFERENCES documents (id)
);

-- Create functions for search vector updates
CREATE OR REPLACE FUNCTION public.documents_search_vector_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        NEW.search_vector = to_tsvector('english', COALESCE(NEW.filename, ''));
        RETURN NEW;
    END
    $$;

CREATE OR REPLACE FUNCTION public.extracted_text_search_vector_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        NEW.search_vector = to_tsvector('english', 
            COALESCE(NEW.text_content, '') || ' ' || 
            COALESCE(NEW.main_message, '') || ' ' || 
            COALESCE(NEW.supporting_text, '') || ' ' || 
            COALESCE(NEW.call_to_action, ''));
        RETURN NEW;
    END
    $$;

CREATE OR REPLACE FUNCTION public.llm_analysis_search_vector_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        NEW.search_vector = to_tsvector('english', 
            COALESCE(NEW.summary_description, '') || ' ' || 
            COALESCE(NEW.campaign_type, '') || ' ' || 
            COALESCE(NEW.election_year, '') || ' ' || 
            COALESCE(NEW.document_tone, ''));
        RETURN NEW;
    END
    $$;

-- Create triggers for search vector updates
DROP TRIGGER IF EXISTS documents_search_vector_update ON public.documents;
CREATE TRIGGER documents_search_vector_update
    BEFORE INSERT OR UPDATE ON public.documents
    FOR EACH ROW
    EXECUTE FUNCTION public.documents_search_vector_update();

DROP TRIGGER IF EXISTS extracted_text_search_vector_update ON public.extracted_text;
CREATE TRIGGER extracted_text_search_vector_update
    BEFORE INSERT OR UPDATE ON public.extracted_text
    FOR EACH ROW
    EXECUTE FUNCTION public.extracted_text_search_vector_update();

DROP TRIGGER IF EXISTS llm_analysis_search_vector_update ON public.llm_analysis;
CREATE TRIGGER llm_analysis_search_vector_update
    BEFORE INSERT OR UPDATE ON public.llm_analysis
    FOR EACH ROW
    EXECUTE FUNCTION public.llm_analysis_search_vector_update();
