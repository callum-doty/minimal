"""reset_migrations

Revision ID: f2da3b4a825b
Revises: 
Create Date: 2025-04-29 16:15:51.392623

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f2da3b4a825b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('document_scorecards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('metadata_score', sa.Integer(), nullable=True),
    sa.Column('text_extraction_score', sa.Integer(), nullable=True),
    sa.Column('classification_score', sa.Integer(), nullable=True),
    sa.Column('entity_score', sa.Integer(), nullable=True),
    sa.Column('design_score', sa.Integer(), nullable=True),
    sa.Column('keyword_score', sa.Integer(), nullable=True),
    sa.Column('communication_score', sa.Integer(), nullable=True),
    sa.Column('total_score', sa.Integer(), nullable=True),
    sa.Column('requires_review', sa.Boolean(), nullable=True),
    sa.Column('review_reason', sa.Text(), nullable=True),
    sa.Column('batch1_success', sa.Boolean(), nullable=True),
    sa.Column('batch2_success', sa.Boolean(), nullable=True),
    sa.Column('batch3_success', sa.Boolean(), nullable=True),
    sa.Column('metadata_flags', sa.Text(), nullable=True),
    sa.Column('text_flags', sa.Text(), nullable=True),
    sa.Column('classification_flags', sa.Text(), nullable=True),
    sa.Column('entity_flags', sa.Text(), nullable=True),
    sa.Column('design_flags', sa.Text(), nullable=True),
    sa.Column('keyword_flags', sa.Text(), nullable=True),
    sa.Column('communication_flags', sa.Text(), nullable=True),
    sa.Column('reviewed', sa.Boolean(), nullable=True),
    sa.Column('review_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewer_notes', sa.Text(), nullable=True),
    sa.Column('corrections_made', sa.Text(), nullable=True),
    sa.Column('created_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_date', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('classifications', schema=None) as batch_op:
        batch_op.drop_index('ix_classifications_category')
        batch_op.drop_index('ix_classifications_document_id')

    with op.batch_alter_table('communication_focus', schema=None) as batch_op:
        batch_op.drop_index('ix_communication_focus_document_id')
        batch_op.drop_index('ix_communication_focus_primary_issue')

    with op.batch_alter_table('design_elements', schema=None) as batch_op:
        batch_op.drop_index('ix_design_elements_document_id')
        batch_op.drop_index('ix_design_elements_geographic_location')

    with op.batch_alter_table('document_keywords', schema=None) as batch_op:
        batch_op.drop_index('ix_document_keywords_document_id')
        batch_op.drop_index('ix_document_keywords_taxonomy_id')

    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.drop_index('documents_embeddings_idx', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
        batch_op.drop_index('ix_documents_filename')
        batch_op.drop_index('ix_documents_search_vector', postgresql_using='gin')
        batch_op.drop_index('ix_documents_status')
        batch_op.drop_index('ix_documents_upload_date')
        batch_op.drop_column('embeddings')
        batch_op.drop_column('search_vector')

    with op.batch_alter_table('entities', schema=None) as batch_op:
        batch_op.drop_index('ix_entities_client_name')
        batch_op.drop_index('ix_entities_document_id')
        batch_op.drop_index('ix_entities_opponent_name')

    with op.batch_alter_table('extracted_text', schema=None) as batch_op:
        batch_op.drop_index('ix_extracted_text_document_id')
        batch_op.drop_index('ix_extracted_text_main_message')
        batch_op.drop_index('ix_extracted_text_search_vector', postgresql_using='gin')
        batch_op.drop_index('ix_extracted_text_supporting_text')
        batch_op.drop_column('search_vector')

    with op.batch_alter_table('keyword_synonyms', schema=None) as batch_op:
        batch_op.drop_index('ix_keyword_synonyms_synonym')
        batch_op.drop_index('ix_keyword_synonyms_taxonomy_id')

    with op.batch_alter_table('keyword_taxonomy', schema=None) as batch_op:
        batch_op.drop_index('ix_keyword_taxonomy_primary_category')
        batch_op.drop_index('ix_keyword_taxonomy_subcategory')
        batch_op.drop_index('ix_keyword_taxonomy_term')

    with op.batch_alter_table('llm_analysis', schema=None) as batch_op:
        batch_op.drop_index('ix_llm_analysis_campaign_type')
        batch_op.drop_index('ix_llm_analysis_document_id')
        batch_op.drop_index('ix_llm_analysis_document_tone')
        batch_op.drop_index('ix_llm_analysis_election_year')
        batch_op.drop_index('ix_llm_analysis_search_vector', postgresql_using='gin')
        batch_op.drop_index('ix_llm_analysis_summary')
        batch_op.drop_index('llm_analysis_embeddings_idx', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
        batch_op.drop_column('embeddings')
        batch_op.drop_column('search_vector')

    with op.batch_alter_table('llm_keywords', schema=None) as batch_op:
        batch_op.drop_index('ix_llm_keywords_analysis_id')
        batch_op.drop_index('ix_llm_keywords_keyword')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('llm_keywords', schema=None) as batch_op:
        batch_op.create_index('ix_llm_keywords_keyword', ['keyword'], unique=False)
        batch_op.create_index('ix_llm_keywords_analysis_id', ['llm_analysis_id'], unique=False)

    with op.batch_alter_table('llm_analysis', schema=None) as batch_op:
        batch_op.add_column(sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('embeddings', sa.NullType(), autoincrement=False, nullable=True))
        batch_op.create_index('llm_analysis_embeddings_idx', ['embeddings'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
        batch_op.create_index('ix_llm_analysis_summary', ['summary_description'], unique=False)
        batch_op.create_index('ix_llm_analysis_search_vector', ['search_vector'], unique=False, postgresql_using='gin')
        batch_op.create_index('ix_llm_analysis_election_year', ['election_year'], unique=False)
        batch_op.create_index('ix_llm_analysis_document_tone', ['document_tone'], unique=False)
        batch_op.create_index('ix_llm_analysis_document_id', ['document_id'], unique=False)
        batch_op.create_index('ix_llm_analysis_campaign_type', ['campaign_type'], unique=False)

    with op.batch_alter_table('keyword_taxonomy', schema=None) as batch_op:
        batch_op.create_index('ix_keyword_taxonomy_term', ['term'], unique=False)
        batch_op.create_index('ix_keyword_taxonomy_subcategory', ['subcategory'], unique=False)
        batch_op.create_index('ix_keyword_taxonomy_primary_category', ['primary_category'], unique=False)

    with op.batch_alter_table('keyword_synonyms', schema=None) as batch_op:
        batch_op.create_index('ix_keyword_synonyms_taxonomy_id', ['taxonomy_id'], unique=False)
        batch_op.create_index('ix_keyword_synonyms_synonym', ['synonym'], unique=False)

    with op.batch_alter_table('extracted_text', schema=None) as batch_op:
        batch_op.add_column(sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
        batch_op.create_index('ix_extracted_text_supporting_text', ['supporting_text'], unique=False)
        batch_op.create_index('ix_extracted_text_search_vector', ['search_vector'], unique=False, postgresql_using='gin')
        batch_op.create_index('ix_extracted_text_main_message', ['main_message'], unique=False)
        batch_op.create_index('ix_extracted_text_document_id', ['document_id'], unique=False)

    with op.batch_alter_table('entities', schema=None) as batch_op:
        batch_op.create_index('ix_entities_opponent_name', ['opponent_name'], unique=False)
        batch_op.create_index('ix_entities_document_id', ['document_id'], unique=False)
        batch_op.create_index('ix_entities_client_name', ['client_name'], unique=False)

    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.add_column(sa.Column('search_vector', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('embeddings', sa.NullType(), autoincrement=False, nullable=True))
        batch_op.create_index('ix_documents_upload_date', ['upload_date'], unique=False)
        batch_op.create_index('ix_documents_status', ['status'], unique=False)
        batch_op.create_index('ix_documents_search_vector', ['search_vector'], unique=False, postgresql_using='gin')
        batch_op.create_index('ix_documents_filename', ['filename'], unique=False)
        batch_op.create_index('documents_embeddings_idx', ['embeddings'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')

    with op.batch_alter_table('document_keywords', schema=None) as batch_op:
        batch_op.create_index('ix_document_keywords_taxonomy_id', ['taxonomy_id'], unique=False)
        batch_op.create_index('ix_document_keywords_document_id', ['document_id'], unique=False)

    with op.batch_alter_table('design_elements', schema=None) as batch_op:
        batch_op.create_index('ix_design_elements_geographic_location', ['geographic_location'], unique=False)
        batch_op.create_index('ix_design_elements_document_id', ['document_id'], unique=False)

    with op.batch_alter_table('communication_focus', schema=None) as batch_op:
        batch_op.create_index('ix_communication_focus_primary_issue', ['primary_issue'], unique=False)
        batch_op.create_index('ix_communication_focus_document_id', ['document_id'], unique=False)

    with op.batch_alter_table('classifications', schema=None) as batch_op:
        batch_op.create_index('ix_classifications_document_id', ['document_id'], unique=False)
        batch_op.create_index('ix_classifications_category', ['category'], unique=False)

    op.drop_table('document_scorecards')
    # ### end Alembic commands ###
